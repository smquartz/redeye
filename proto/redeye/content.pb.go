// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/redeye/content.proto

/*
Package redeye is a generated protocol buffer package.

It is generated from these files:
	proto/redeye/content.proto
	proto/redeye/content_service.proto
	proto/redeye/model.proto
	proto/redeye/tv.proto

It has these top-level messages:
	Content
	ContentDescription
	UserGeneratedContent
	TvSeriesEpisodeContent
	MovieContent
	AdvertisementContent
	OtherContent
	CreateContentRequest
	CreateContentResponse
	GetContentRequest
	GetContentResponse
	ListContentRequest
	ListContentResponse
	UpdateContentRequest
	UpdateContentResponse
	DeleteContentRequest
	DeleteContentResponse
	Model
*/
package redeye

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContentType int32

const (
	ContentType_UNKNOWN_CONTENT           ContentType = 0
	ContentType_USER_GENERATED_CONTENT    ContentType = 1
	ContentType_TV_SERIES_EPISODE_CONTENT ContentType = 2
	ContentType_MOVIE_CONTENT             ContentType = 3
	ContentType_ADVERTISEMENT_CONTENT     ContentType = 10
	ContentType_SYSTEM_TEST_CONTENT       ContentType = 11
	ContentType_OTHER_CONTENT             ContentType = 15
)

var ContentType_name = map[int32]string{
	0:  "UNKNOWN_CONTENT",
	1:  "USER_GENERATED_CONTENT",
	2:  "TV_SERIES_EPISODE_CONTENT",
	3:  "MOVIE_CONTENT",
	10: "ADVERTISEMENT_CONTENT",
	11: "SYSTEM_TEST_CONTENT",
	15: "OTHER_CONTENT",
}
var ContentType_value = map[string]int32{
	"UNKNOWN_CONTENT":           0,
	"USER_GENERATED_CONTENT":    1,
	"TV_SERIES_EPISODE_CONTENT": 2,
	"MOVIE_CONTENT":             3,
	"ADVERTISEMENT_CONTENT":     10,
	"SYSTEM_TEST_CONTENT":       11,
	"OTHER_CONTENT":             15,
}

func (x ContentType) String() string {
	return proto.EnumName(ContentType_name, int32(x))
}
func (ContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// describes the contents of a video
type Content struct {
	// include the base model definition
	Base *Model `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	// the broad type of the content
	Type ContentType `protobuf:"varint,2,opt,name=type,enum=video.quartz.famethyst.srv.redeye.ContentType" json:"type,omitempty"`
	// actual description of the content
	Description *ContentDescription `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Content) GetBase() *Model {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Content) GetType() ContentType {
	if m != nil {
		return m.Type
	}
	return ContentType_UNKNOWN_CONTENT
}

func (m *Content) GetDescription() *ContentDescription {
	if m != nil {
		return m.Description
	}
	return nil
}

// contains an actual description of content
// only one field should be set at any given time
// will become a oneof when micro/micro supports them
type ContentDescription struct {
	// content that is user generated, such as what is typically found on YouTube
	UserGenerated *UserGeneratedContent `protobuf:"bytes,1,opt,name=user_generated,json=userGenerated" json:"user_generated,omitempty"`
	// content that is an episode of a TV series
	Episode *TvSeriesEpisodeContent `protobuf:"bytes,2,opt,name=episode" json:"episode,omitempty"`
	// content that is a movie
	Movie *MovieContent `protobuf:"bytes,3,opt,name=movie" json:"movie,omitempty"`
	// content that is an advertisement
	Advertisement *AdvertisementContent `protobuf:"bytes,10,opt,name=advertisement" json:"advertisement,omitempty"`
	// content whole sole purpose is to test technical infrastructure
	SystemTest *OtherContent `protobuf:"bytes,11,opt,name=system_test,json=systemTest" json:"system_test,omitempty"`
	// content not better covered by another type
	Other *OtherContent `protobuf:"bytes,15,opt,name=other" json:"other,omitempty"`
}

func (m *ContentDescription) Reset()                    { *m = ContentDescription{} }
func (m *ContentDescription) String() string            { return proto.CompactTextString(m) }
func (*ContentDescription) ProtoMessage()               {}
func (*ContentDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ContentDescription) GetUserGenerated() *UserGeneratedContent {
	if m != nil {
		return m.UserGenerated
	}
	return nil
}

func (m *ContentDescription) GetEpisode() *TvSeriesEpisodeContent {
	if m != nil {
		return m.Episode
	}
	return nil
}

func (m *ContentDescription) GetMovie() *MovieContent {
	if m != nil {
		return m.Movie
	}
	return nil
}

func (m *ContentDescription) GetAdvertisement() *AdvertisementContent {
	if m != nil {
		return m.Advertisement
	}
	return nil
}

func (m *ContentDescription) GetSystemTest() *OtherContent {
	if m != nil {
		return m.SystemTest
	}
	return nil
}

func (m *ContentDescription) GetOther() *OtherContent {
	if m != nil {
		return m.Other
	}
	return nil
}

// describes video content that is user generated, such as that typically found
// on YouTube
type UserGeneratedContent struct {
	// for data that is not better covered by another field
	Custom map[string]string `protobuf:"bytes,15,rep,name=custom" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserGeneratedContent) Reset()                    { *m = UserGeneratedContent{} }
func (m *UserGeneratedContent) String() string            { return proto.CompactTextString(m) }
func (*UserGeneratedContent) ProtoMessage()               {}
func (*UserGeneratedContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserGeneratedContent) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

// describes content that is an episode of a TV series
type TvSeriesEpisodeContent struct {
	// database used as reference for information regarding this episode
	Database TvDatabase `protobuf:"varint,1,opt,name=database,enum=video.quartz.famethyst.srv.redeye.TvDatabase" json:"database,omitempty"`
	// id of the series in the database
	SeriesId int64 `protobuf:"varint,2,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	// id of the episode in the database
	EpisodeId int64 `protobuf:"varint,3,opt,name=episode_id,json=episodeId" json:"episode_id,omitempty"`
	// for data that is not better covered by another field
	Custom map[string]string `protobuf:"bytes,15,rep,name=custom" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TvSeriesEpisodeContent) Reset()                    { *m = TvSeriesEpisodeContent{} }
func (m *TvSeriesEpisodeContent) String() string            { return proto.CompactTextString(m) }
func (*TvSeriesEpisodeContent) ProtoMessage()               {}
func (*TvSeriesEpisodeContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TvSeriesEpisodeContent) GetDatabase() TvDatabase {
	if m != nil {
		return m.Database
	}
	return TvDatabase_UNKNOWN_TV_DATABASE
}

func (m *TvSeriesEpisodeContent) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *TvSeriesEpisodeContent) GetEpisodeId() int64 {
	if m != nil {
		return m.EpisodeId
	}
	return 0
}

func (m *TvSeriesEpisodeContent) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

// describes content that is a movie
type MovieContent struct {
	// database used as reference for information regarding this movie
	Database MovieDatabase `protobuf:"varint,1,opt,name=database,enum=video.quartz.famethyst.srv.redeye.MovieDatabase" json:"database,omitempty"`
	// id of the movie in the database
	MovieId int64 `protobuf:"varint,2,opt,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	// for data that is not better covered by another field
	Custom map[string]string `protobuf:"bytes,15,rep,name=custom" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MovieContent) Reset()                    { *m = MovieContent{} }
func (m *MovieContent) String() string            { return proto.CompactTextString(m) }
func (*MovieContent) ProtoMessage()               {}
func (*MovieContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MovieContent) GetDatabase() MovieDatabase {
	if m != nil {
		return m.Database
	}
	return MovieDatabase_UNKNOWN_MOVIE_DATABASE
}

func (m *MovieContent) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *MovieContent) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

// describes content that is an advertisement
type AdvertisementContent struct {
	// for data that is not better covered by another field
	Custom map[string]string `protobuf:"bytes,15,rep,name=custom" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AdvertisementContent) Reset()                    { *m = AdvertisementContent{} }
func (m *AdvertisementContent) String() string            { return proto.CompactTextString(m) }
func (*AdvertisementContent) ProtoMessage()               {}
func (*AdvertisementContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AdvertisementContent) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

// describes content that is not better described by another type
type OtherContent struct {
	// for data that is not better covered by another field
	Custom map[string]string `protobuf:"bytes,15,rep,name=custom" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *OtherContent) Reset()                    { *m = OtherContent{} }
func (m *OtherContent) String() string            { return proto.CompactTextString(m) }
func (*OtherContent) ProtoMessage()               {}
func (*OtherContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OtherContent) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

func init() {
	proto.RegisterType((*Content)(nil), "video.quartz.famethyst.srv.redeye.Content")
	proto.RegisterType((*ContentDescription)(nil), "video.quartz.famethyst.srv.redeye.ContentDescription")
	proto.RegisterType((*UserGeneratedContent)(nil), "video.quartz.famethyst.srv.redeye.UserGeneratedContent")
	proto.RegisterType((*TvSeriesEpisodeContent)(nil), "video.quartz.famethyst.srv.redeye.TvSeriesEpisodeContent")
	proto.RegisterType((*MovieContent)(nil), "video.quartz.famethyst.srv.redeye.MovieContent")
	proto.RegisterType((*AdvertisementContent)(nil), "video.quartz.famethyst.srv.redeye.AdvertisementContent")
	proto.RegisterType((*OtherContent)(nil), "video.quartz.famethyst.srv.redeye.OtherContent")
	proto.RegisterEnum("video.quartz.famethyst.srv.redeye.ContentType", ContentType_name, ContentType_value)
}

func init() { proto.RegisterFile("proto/redeye/content.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x6e, 0xd3, 0x5a,
	0x10, 0x3d, 0x4e, 0x7a, 0x49, 0xc6, 0x6d, 0xd3, 0xb3, 0x7b, 0x39, 0x6e, 0x8e, 0x2a, 0x95, 0x3c,
	0x45, 0x48, 0xb8, 0x28, 0x08, 0x41, 0x81, 0x97, 0x36, 0xd9, 0x2a, 0x16, 0x24, 0xa9, 0xb6, 0xdd,
	0x56, 0x80, 0x8a, 0xe5, 0xd6, 0x03, 0xb5, 0x68, 0xe2, 0xe0, 0xbd, 0x63, 0xc9, 0xfc, 0x00, 0x7c,
	0x05, 0x9f, 0xc0, 0x2b, 0xe2, 0x7f, 0xf8, 0x10, 0xe4, 0x4b, 0x1c, 0x87, 0x46, 0xc2, 0x44, 0x79,
	0x8b, 0x67, 0x65, 0xad, 0x99, 0x59, 0x5e, 0xa3, 0x04, 0xaa, 0x03, 0xcf, 0x15, 0xee, 0xbe, 0x87,
	0x36, 0x06, 0xb8, 0x7f, 0xe5, 0xf6, 0x05, 0xf6, 0x85, 0x1a, 0x15, 0xc9, 0x1d, 0xdf, 0xb1, 0xd1,
	0x55, 0x3f, 0x0e, 0x2d, 0x4f, 0x7c, 0x52, 0xdf, 0x59, 0x3d, 0x14, 0xd7, 0x01, 0x17, 0x2a, 0xf7,
	0x7c, 0x35, 0x26, 0x54, 0x95, 0x09, 0x7a, 0xcf, 0xb5, 0xf1, 0x26, 0x26, 0x57, 0xb7, 0x26, 0x10,
	0xe1, 0xc7, 0xe5, 0xda, 0x4f, 0x09, 0x96, 0x9b, 0x71, 0x17, 0xf2, 0x0c, 0x16, 0x2e, 0x2d, 0x8e,
	0x8a, 0xb4, 0x27, 0xd5, 0xe5, 0x46, 0x5d, 0xfd, 0x63, 0x3b, 0xb5, 0x1d, 0x36, 0x60, 0x11, 0x8b,
	0x1c, 0xc1, 0x82, 0x08, 0x06, 0xa8, 0x14, 0xf6, 0xa4, 0xfa, 0x5a, 0x43, 0xcd, 0xc1, 0x4e, 0xfa,
	0x1a, 0xc1, 0x00, 0x59, 0xc4, 0x25, 0xe7, 0x20, 0xdb, 0xc8, 0xaf, 0x3c, 0x67, 0x20, 0x1c, 0xb7,
	0xaf, 0x14, 0xa3, 0x41, 0x1e, 0xe6, 0x97, 0x6a, 0x8d, 0xc9, 0x2c, 0xab, 0x54, 0xfb, 0xb2, 0x00,
	0xe4, 0xf6, 0x77, 0xc8, 0x5b, 0x58, 0x1b, 0x72, 0xf4, 0xcc, 0xf7, 0xd8, 0x47, 0xcf, 0x12, 0x68,
	0x27, 0xbb, 0x3f, 0xca, 0xd1, 0xf2, 0x94, 0xa3, 0x77, 0x3c, 0xe2, 0x25, 0xda, 0x6c, 0x75, 0x98,
	0xad, 0x12, 0x1d, 0x96, 0x71, 0xe0, 0x70, 0xd7, 0x8e, 0x6d, 0x91, 0x1b, 0x07, 0x39, 0x84, 0x0d,
	0x5f, 0x47, 0xcf, 0x41, 0x4e, 0x63, 0xe6, 0x48, 0x7a, 0xa4, 0x44, 0x28, 0x2c, 0xf6, 0x5c, 0xdf,
	0xc1, 0xc4, 0x9e, 0xfd, 0x5c, 0xef, 0xc9, 0x77, 0x52, 0xa1, 0x98, 0x4d, 0x2e, 0x60, 0xd5, 0xb2,
	0x7d, 0xf4, 0x84, 0xc3, 0xb1, 0x87, 0x7d, 0xa1, 0x40, 0xee, 0xd5, 0x0f, 0xb3, 0xbc, 0x74, 0xf5,
	0x09, 0x35, 0x72, 0x02, 0x32, 0x0f, 0xb8, 0xc0, 0x9e, 0x29, 0x90, 0x0b, 0x45, 0xce, 0x3d, 0x6b,
	0x57, 0x5c, 0xa3, 0x37, 0x12, 0x85, 0x58, 0xc3, 0x40, 0x2e, 0xc2, 0xbd, 0xdd, 0x10, 0x53, 0x2a,
	0xb3, 0x69, 0xc5, 0xec, 0xda, 0x37, 0x09, 0x36, 0xa7, 0xbd, 0x3b, 0xf2, 0x06, 0x96, 0xae, 0x86,
	0x5c, 0xb8, 0x3d, 0xa5, 0xb2, 0x57, 0xac, 0xcb, 0x8d, 0xe6, 0x8c, 0x21, 0x50, 0x9b, 0x91, 0x0a,
	0xed, 0x0b, 0x2f, 0x60, 0x89, 0x64, 0xf5, 0x00, 0xe4, 0x4c, 0x99, 0xac, 0x43, 0xf1, 0x03, 0x06,
	0x51, 0xda, 0xca, 0x2c, 0xfc, 0x48, 0x36, 0x61, 0xd1, 0xb7, 0x6e, 0x86, 0x71, 0x50, 0xca, 0x2c,
	0x7e, 0x78, 0x52, 0x78, 0x2c, 0xd5, 0x7e, 0x14, 0x60, 0x7b, 0x7a, 0x26, 0x88, 0x06, 0x25, 0xdb,
	0x12, 0x56, 0x7a, 0xb5, 0x6b, 0x8d, 0x7b, 0xb9, 0x02, 0xd6, 0x4a, 0x48, 0x2c, 0xa5, 0x93, 0xff,
	0xa1, 0xcc, 0xa3, 0x16, 0xa6, 0x63, 0x47, 0x33, 0x14, 0x59, 0x29, 0x2e, 0x68, 0x36, 0xd9, 0x05,
	0x48, 0xd2, 0x17, 0xa2, 0xc5, 0x08, 0x2d, 0x27, 0x15, 0xcd, 0x26, 0x17, 0xbf, 0x39, 0x47, 0x67,
	0x4e, 0xf9, 0xbc, 0xbd, 0xfb, 0x5c, 0x80, 0x95, 0x6c, 0xf8, 0xc9, 0xcb, 0x5b, 0x8e, 0xdd, 0xcf,
	0x7b, 0x3f, 0x53, 0x4c, 0xdb, 0x81, 0x52, 0x74, 0x4c, 0x63, 0xcf, 0x96, 0xa3, 0x67, 0x2d, 0x3c,
	0xfd, 0x49, 0x4f, 0x9e, 0xfe, 0xe5, 0x99, 0xce, 0xdb, 0x89, 0x30, 0xf6, 0xd3, 0xee, 0x76, 0xa6,
	0xd8, 0x4f, 0x13, 0x9a, 0xf7, 0xc0, 0x5f, 0x25, 0x58, 0xc9, 0xde, 0xef, 0x4c, 0x8e, 0x66, 0x05,
	0xe6, 0x3c, 0xe0, 0xdd, 0xef, 0x12, 0xc8, 0x99, 0x9f, 0x30, 0xb2, 0x01, 0x95, 0xd3, 0xce, 0x8b,
	0x4e, 0xf7, 0xbc, 0x63, 0x36, 0xbb, 0x1d, 0x83, 0x76, 0x8c, 0xf5, 0x7f, 0x48, 0x15, 0xb6, 0x4f,
	0x75, 0xca, 0xcc, 0x63, 0xda, 0xa1, 0xec, 0xd0, 0xa0, 0xad, 0x14, 0x93, 0xc8, 0x2e, 0xec, 0x18,
	0x67, 0xa6, 0x4e, 0x99, 0x46, 0x75, 0x93, 0x9e, 0x68, 0x7a, 0xb7, 0x45, 0x53, 0xb8, 0x40, 0xfe,
	0x85, 0xd5, 0x76, 0xf7, 0x4c, 0x1b, 0x97, 0x8a, 0x64, 0x07, 0xb6, 0x0e, 0x5b, 0x67, 0x94, 0x19,
	0x9a, 0x4e, 0xdb, 0xb4, 0x63, 0xa4, 0x10, 0x90, 0xff, 0x60, 0x43, 0x7f, 0xa5, 0x1b, 0xb4, 0x6d,
	0x1a, 0x54, 0x1f, 0x03, 0x72, 0x28, 0xd3, 0x35, 0x9e, 0x53, 0x96, 0x96, 0x2a, 0x47, 0xa5, 0xd7,
	0x4b, 0xb1, 0x3f, 0x97, 0x4b, 0xd1, 0xbf, 0x80, 0x07, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0xed, 0x5f, 0xe5, 0x77, 0x08, 0x00, 0x00,
}
