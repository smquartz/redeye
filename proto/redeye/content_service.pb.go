// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/redeye/content_service.proto

package redeye

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// request for Content.Create method
type CreateContentRequest struct {
	// content to create
	Content *Content `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *CreateContentRequest) Reset()                    { *m = CreateContentRequest{} }
func (m *CreateContentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContentRequest) ProtoMessage()               {}
func (*CreateContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateContentRequest) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// response for Content.Create method
type CreateContentResponse struct {
	// content entry that was created, including the ID
	Content *Content `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *CreateContentResponse) Reset()                    { *m = CreateContentResponse{} }
func (m *CreateContentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContentResponse) ProtoMessage()               {}
func (*CreateContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateContentResponse) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// request for the Content.Get method
type GetContentRequest struct {
	// ID of the content to get
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetContentRequest) Reset()                    { *m = GetContentRequest{} }
func (m *GetContentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContentRequest) ProtoMessage()               {}
func (*GetContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetContentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// response for the Content.Get method
type GetContentResponse struct {
	// content entry that was retrieved
	Content *Content `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *GetContentResponse) Reset()                    { *m = GetContentResponse{} }
func (m *GetContentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetContentResponse) ProtoMessage()               {}
func (*GetContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetContentResponse) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// request for Content.List method
type ListContentRequest struct {
	// page number / offset
	Offset int64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	// page size
	Size int64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *ListContentRequest) Reset()                    { *m = ListContentRequest{} }
func (m *ListContentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContentRequest) ProtoMessage()               {}
func (*ListContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ListContentRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListContentRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

// response for Content.List method
type ListContentResponse struct {
	// actual content entries to return
	Content []*Content `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
}

func (m *ListContentResponse) Reset()                    { *m = ListContentResponse{} }
func (m *ListContentResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContentResponse) ProtoMessage()               {}
func (*ListContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListContentResponse) GetContent() []*Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// request for Content.Update method
type UpdateContentRequest struct {
	// actual content entry being updated
	// contains ID
	Content *Content `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateContentRequest) Reset()                    { *m = UpdateContentRequest{} }
func (m *UpdateContentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContentRequest) ProtoMessage()               {}
func (*UpdateContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *UpdateContentRequest) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// response for Content.Update method
type UpdateContentResponse struct {
	// content entry that was updated as retrieved from the database
	Content *Content `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateContentResponse) Reset()                    { *m = UpdateContentResponse{} }
func (m *UpdateContentResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateContentResponse) ProtoMessage()               {}
func (*UpdateContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *UpdateContentResponse) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// request for Content.Delete method
type DeleteContentRequest struct {
	// ID of the content entry to delete
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteContentRequest) Reset()                    { *m = DeleteContentRequest{} }
func (m *DeleteContentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContentRequest) ProtoMessage()               {}
func (*DeleteContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *DeleteContentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// response for Content.Delete method
type DeleteContentResponse struct {
	// whether the deletion succeeded
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *DeleteContentResponse) Reset()                    { *m = DeleteContentResponse{} }
func (m *DeleteContentResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteContentResponse) ProtoMessage()               {}
func (*DeleteContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *DeleteContentResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*CreateContentRequest)(nil), "video.quartz.famethyst.srv.redeye.CreateContentRequest")
	proto.RegisterType((*CreateContentResponse)(nil), "video.quartz.famethyst.srv.redeye.CreateContentResponse")
	proto.RegisterType((*GetContentRequest)(nil), "video.quartz.famethyst.srv.redeye.GetContentRequest")
	proto.RegisterType((*GetContentResponse)(nil), "video.quartz.famethyst.srv.redeye.GetContentResponse")
	proto.RegisterType((*ListContentRequest)(nil), "video.quartz.famethyst.srv.redeye.ListContentRequest")
	proto.RegisterType((*ListContentResponse)(nil), "video.quartz.famethyst.srv.redeye.ListContentResponse")
	proto.RegisterType((*UpdateContentRequest)(nil), "video.quartz.famethyst.srv.redeye.UpdateContentRequest")
	proto.RegisterType((*UpdateContentResponse)(nil), "video.quartz.famethyst.srv.redeye.UpdateContentResponse")
	proto.RegisterType((*DeleteContentRequest)(nil), "video.quartz.famethyst.srv.redeye.DeleteContentRequest")
	proto.RegisterType((*DeleteContentResponse)(nil), "video.quartz.famethyst.srv.redeye.DeleteContentResponse")
}

func init() { proto.RegisterFile("proto/redeye/content_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x4f, 0xf2, 0x30,
	0x18, 0x07, 0x46, 0x06, 0xef, 0xf3, 0x26, 0x24, 0x56, 0x30, 0x64, 0x27, 0xad, 0x89, 0x31, 0x1e,
	0x4a, 0xc4, 0xcf, 0xa3, 0x11, 0x12, 0x2e, 0x9e, 0x66, 0xbc, 0x20, 0xc6, 0xe0, 0xf6, 0x10, 0x97,
	0x28, 0x83, 0xb5, 0x60, 0x20, 0xe1, 0x3f, 0xf7, 0x60, 0x5c, 0x07, 0xc1, 0xae, 0x89, 0x1d, 0xea,
	0x6d, 0xdd, 0x7e, 0x5f, 0x7d, 0xfa, 0xeb, 0x80, 0x8e, 0xa2, 0x50, 0x84, 0x8d, 0x08, 0x7d, 0x9c,
	0x61, 0xc3, 0x0b, 0x87, 0x02, 0x87, 0xe2, 0x91, 0x63, 0x34, 0x0d, 0x3c, 0x64, 0xf1, 0x47, 0xb2,
	0x37, 0x0d, 0x7c, 0x0c, 0xd9, 0x78, 0xd2, 0x8f, 0xc4, 0x9c, 0x0d, 0xfa, 0xaf, 0x28, 0x9e, 0x67,
	0x5c, 0x30, 0x1e, 0x4d, 0x99, 0x24, 0x3a, 0x8e, 0x4e, 0x46, 0xd2, 0x69, 0x0f, 0xaa, 0xad, 0x08,
	0xfb, 0x02, 0x5b, 0xf2, 0xb5, 0x8b, 0xe3, 0x09, 0x72, 0x41, 0xda, 0x50, 0x4a, 0x80, 0xf5, 0xfc,
	0x6e, 0xfe, 0xf0, 0x7f, 0xf3, 0x88, 0x7d, 0x6b, 0xc4, 0x96, 0x1a, 0x4b, 0x2a, 0x7d, 0x80, 0x9a,
	0xa2, 0xce, 0x47, 0xe1, 0x90, 0xe3, 0xba, 0x7c, 0x61, 0x73, 0xf9, 0x7d, 0xd8, 0xea, 0xa0, 0x50,
	0x92, 0x57, 0xa0, 0x10, 0xf8, 0x71, 0xe8, 0x7f, 0x6e, 0x21, 0xf0, 0x69, 0x17, 0xc8, 0x3a, 0x28,
	0x1d, 0xe0, 0x07, 0xfb, 0xbb, 0x02, 0x72, 0x13, 0x70, 0x35, 0xc1, 0x0e, 0xd8, 0xe1, 0x60, 0xc0,
	0x51, 0x4a, 0x5b, 0x6e, 0xb2, 0x22, 0x04, 0x8a, 0x3c, 0x98, 0x63, 0xbc, 0x63, 0xcb, 0x8d, 0x9f,
	0xe9, 0x3d, 0x6c, 0x7f, 0x51, 0xd0, 0xc5, 0xb3, 0x36, 0x8d, 0xd7, 0x83, 0xea, 0xdd, 0xc8, 0xff,
	0xc3, 0xc3, 0x55, 0xd4, 0x7f, 0x75, 0xb6, 0x07, 0x50, 0x6d, 0xe3, 0x0b, 0xa6, 0xc2, 0xab, 0xe7,
	0x7b, 0x0c, 0x35, 0x05, 0x97, 0xc4, 0xa8, 0x43, 0x89, 0x4f, 0x3c, 0x0f, 0x39, 0x8f, 0xd1, 0x65,
	0x77, 0xb9, 0x6c, 0xbe, 0x17, 0xa1, 0x92, 0xa0, 0x6f, 0xe5, 0x65, 0x22, 0x0b, 0xb0, 0x65, 0x53,
	0xc9, 0x85, 0x49, 0x58, 0xcd, 0x95, 0x71, 0x2e, 0xb3, 0x13, 0x65, 0x52, 0x9a, 0x23, 0x02, 0xac,
	0x0e, 0x0a, 0x72, 0x6a, 0x20, 0x91, 0x6a, 0xbc, 0x73, 0x96, 0x91, 0xb5, 0x72, 0x7d, 0x83, 0xe2,
	0x67, 0xf9, 0x88, 0x89, 0x40, 0xba, 0xe7, 0xce, 0x79, 0x56, 0xda, 0xca, 0x78, 0x01, 0xb6, 0xac,
	0x8e, 0xd1, 0xb4, 0x75, 0x1d, 0x36, 0x9a, 0xb6, 0xb6, 0x9e, 0xd2, 0x5e, 0x56, 0xc6, 0xc8, 0x5e,
	0xd7, 0x42, 0x23, 0x7b, 0x6d, 0x2d, 0x69, 0xee, 0xba, 0xdc, 0xb5, 0x25, 0xe2, 0xc9, 0x8e, 0x7f,
	0xc2, 0x27, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x51, 0xe5, 0xd4, 0xe9, 0x05, 0x00, 0x00,
}
